orm operations
>>> from book_store.models import Books
# create
# the first two statements after this line are the same
>>> harry_porter=Books(title='The giant slayer',rating=8)
>>> harry_porter=Books.objects.create(title='The giant slayer',rating=8, author='mark', is_best_selling=True)
>>> harry_porter.save()
>>> lord_of_the_rings=Books(title='Lord of the rings',rating=5)
>>> lord_of_the_rings.save()
>>> Books.objects.all()
>>> Books.objects.all()[0]
>>> Books.objects.all()[0].author
>>> Books.objects.all()[0].is_best_selling



update
ha = Books.objects.all()[0]
ha.author = 'mark'
ha.save()
delete
ha = Books.objects.all()[0]
ha.delete()

query and filtering
# get()
# to get one item that has that property 
# throws error when the result is more than 1

Books.objects.get(is_best_selling=True)

# filter()
# get more data with the same attribute
# can be use to query with more than one attribute

>>> Books.objects.filter(is_best_selling=True)

# query using AND btw two attribute
>>> Books.objects.filter(is_best_selling=True, rating__gte=3)
# contains word is case sensitive except you use the sql lite db
# icontains is to ensure it is not case sensitive in other db
>>> Books.objects.filter(title__contains='The', rating__gte=3)
>>> Books.objects.filter(title__icontains='The', rating__gte=3)

# query using OR btw two attribute
# u need to import Q
# from django.db.models import Q

# using the OR alone
# Books.objects.filter(Q(rating__gte=3) | Q(title__contains= 'The'))

# using AND and OR
# Books.objects.filter(Q(rating__gte=3) | Q(title__contains= 'The'), Q(title__contains= 'Rama'))

# query performance
# this helps us write querries for better performance
# for example examine the querries below

# django peforms lazy computation, meaning in the two objects 
# created below the db is not hit only that the objects are saved in memory
# this is caching

bestseller = Books.objects.filter(is_best_selling=True)
amazing_bestseller = Books.objects.filter(ratings__gte=10)

# only when the output of the querry is used, thats when the db is hit
print(bestseller) # the obly time we hit the db 

print(amazing_bestseller) # processed this queeries based on cached results
print(bestseller)

#take home
#structure your code to allow django re-use your code


# django multiple delete, create and update

delete:https://docs.djangoproject.com/en/3.1/topics/db/queries/#deleting-objects
create:https://docs.djangoproject.com/en/3.0/ref/models/querysets/#bulk-update
update:https://docs.djangoproject.com/en/3.0/ref/models/querysets/#bulk-create


# querring  connected tables
# Book model has a foreign key relationship to Author model, with the author field as the reference
# the author has a last_name and first_name

# direct relation querring
>>> books_rowling = Books.objects.get(author__last_name = 'AA')
>>> books_rowling = Books.objects.get(author__last_name__contains = 'AA')


# cross model querry: This is  inverse relation querring on a model connected with a foreign key

#  solution 1
# we want to querry through the Author model, note the author model does not have a book field but django gat us covered 
# This is possible by using the inverse querry on each of the author instance needed
# The model with the foreing key is the Books, u querry using books_set, the books_set becomes the object holding all the relationship of the other Author class
# all other querry goes well with the books_set

>>> Author.objects.all()[0].books_set
>>> Author.objects.all()[0].books_set.all()
>>> Author.objects.all()[0].books_set
>>> Author.objects.all()[0].books_set.filter(rating__gte=8)
>>> Author.objects.all()[0].books_set.get(rating=9)

# solution 2
# we go to where the the model that holds the Foreign key relationship to the onw we want to querry is, then we set 'related_name=' properties.
# you can then use the related name to do inverse querry as you want.
# if we set related_name= 'books', then we querry below

>>> Author.objects.all()[0].books.all()
>>> Author.objects.all()[0].books.filter(rating__gte=9)


Relationships in django
1. one to one       used with OneToOne on the field model
2. one to many      used with just a Foreign Key declaration on the many side
3. many to many     used with ManyToMany declaration on the field model
                    # This doesn't take the property 'on-delete = models.CASCADE'
                    # beacuse django creates the third table for this kind of relation
                    # and turns each field to an array
                    # beacuse each field is turn to an array, we use the 



Example of a manay to many relationship
between Books and Country models as declared in the models.py

>>> germany = Country.objects.create(name='Germany', code='De')
>>> Brazil = Country.objects.create(name='Brazil', code='BR')
>>> england = Country.objects.create(name='England', code='EN')
>>> nigeria = Country.objects.create(name='Nigeria', code='NGR')
>>> germany.save()
>>> Brazil.save()
>>> england.save()
>>> nigeria.save()
>>> book1.published_countries 
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x111924ac0>
>>> book1.published_countries.all()
<QuerySet []>
>>> book1.published_countries.add(germany)
>>> book1.published_countries.add(Brazil)
>>> book1.published_countries.all()   # This is how you add to a many to many field because it is an array
<QuerySet [<Country: Germany>, <Country: Brazil>]>


# performing an inverse querry in any of them
# if the connected model name is Books, then the inverse querry becomes books_set
# you can change the inverese querry by setting the  related_name' attribute on the declared relationship field
>>> germany.books_set.all()


# Extras on models
Circular Relations & Lazy Relations

Sometimes, you might have two models that depend on each other - i.e. you end up with a circular relationship.
Or you have a model that has a relation with itself.
Or you have a model that should have a relation with some built-in model (i.e. built into Django) 
or a model defined in another application.

Below, you find examples for all three cases that include Django's solution for these kinds of "problems":
Lazy relationships. You can also check out the official docs in addition.

1) Two models that have a circular relationship

class Product(models.Model):
  # ... other fields ...
  last_buyer = models.ForeignKey('User')
  
class User(models.Model):
  # ... other fields ...
  created_products = models.ManyToManyField('Product')
In this example, we have multiple relationships between the same two models.
Hence we might need to define them in both models. By using the model name as a string instead of a direct
reference, Django is able to resolve such dependencies.

2) Relation with the same model

class User(models.Model):
  # ... other fields ...
  friends = models.ManyToManyField('self') 
The special self keyword (used as a string value) tells Django that it should form a 
relationship with (other) instances of the same model.

3) Relationships with other apps and their models (built-in or custom apps)

class Review(models.Model):
  # ... other fields ...
  product = models.ForeignKey('store.Product') # '<appname>.<modelname>'
You can reference models defined in other Django apps (no matter if created by you, via python manage.py
startapp <appname> or if it's a built-in or third-party app) by using the app name and then the name of 
the model inside the app.


# django forms
1. manual forms
2. Model forms

status code
200 request successful
403 forbidden
404 not found
302 change url



Views in django
1. generic or function based view
2. View             # base view
3. template Views
4. List and details Views
5. form view $ create,update and delete Views

when to use which view
1. if you wan't to build your view ground up --> functional or generic view
2. if you want to use predefined get and post request handling user input --> base View
3. if you just want to render final message to a user without a dynamic content --> template Views
4. if you want to display list of things from your database, then --> list view
5. if you want to display just one thing from your database, then --> detail view
6. wanna specially handle form, then  ---> Form view 